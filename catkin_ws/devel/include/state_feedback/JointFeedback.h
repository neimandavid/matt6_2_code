// Generated by gencpp from file state_feedback/JointFeedback.msg
// DO NOT EDIT!


#ifndef STATE_FEEDBACK_MESSAGE_JOINTFEEDBACK_H
#define STATE_FEEDBACK_MESSAGE_JOINTFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace state_feedback
{
template <class ContainerAllocator>
struct JointFeedback_
{
  typedef JointFeedback_<ContainerAllocator> Type;

  JointFeedback_()
    : position(0.0)
    , velocity(0.0)
    , effort(0.0)  {
    }
  JointFeedback_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , effort(0.0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _effort_type;
  _effort_type effort;





  typedef boost::shared_ptr< ::state_feedback::JointFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_feedback::JointFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct JointFeedback_

typedef ::state_feedback::JointFeedback_<std::allocator<void> > JointFeedback;

typedef boost::shared_ptr< ::state_feedback::JointFeedback > JointFeedbackPtr;
typedef boost::shared_ptr< ::state_feedback::JointFeedback const> JointFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_feedback::JointFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_feedback::JointFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_feedback::JointFeedback_<ContainerAllocator1> & lhs, const ::state_feedback::JointFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_feedback::JointFeedback_<ContainerAllocator1> & lhs, const ::state_feedback::JointFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_feedback

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::state_feedback::JointFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_feedback::JointFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_feedback::JointFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_feedback::JointFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_feedback::JointFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_feedback::JointFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_feedback::JointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f903e6dd4b5ac686ff7bb7721bb6721b";
  }

  static const char* value(const ::state_feedback::JointFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf903e6dd4b5ac686ULL;
  static const uint64_t static_value2 = 0xff7bb7721bb6721bULL;
};

template<class ContainerAllocator>
struct DataType< ::state_feedback::JointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_feedback/JointFeedback";
  }

  static const char* value(const ::state_feedback::JointFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_feedback::JointFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position\n"
"float32 velocity\n"
"float32 effort\n"
;
  }

  static const char* value(const ::state_feedback::JointFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_feedback::JointFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_feedback::JointFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_feedback::JointFeedback_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "effort: ";
    Printer<float>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_FEEDBACK_MESSAGE_JOINTFEEDBACK_H
